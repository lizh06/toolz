[agent / manager / mc]
client / request count
queue

logging-name: apscheduler

worker pool
  alloc machine / container
  spin up worker(s)
  start local cache / ipc
  start consumer

jinja2
  custom context (stack of dict)
  resolver function

:mach = prof(user='z', size='>5g', gpu=True)

mach:x = mach:!cmd -a arg1 arg2
user:t = proj.a(a, b)
!foo.jar:x

file('') > x
t.out > x

profile
  region:
  size:
  gpu:
  user:
  svc:

x.down:
  restart

x.up:
  proj.b d

  cmd profile.json

  arguments:
    O: int
    J: bool
  events:
    started: <pattern>
    stoped: <pattern>
    request: <pattern>
    init(pid) / up / down / req
    {proc,svc}
    proc.up
    proc.down
    req
    req.failed
    req.ok
    login
    login.ok
    login.failed
      id:
      who:
      time:

[]
intake / fsspec / smart_open
mlflow / dvc / kedro
petl

dask-ssh for multi machine deploy


dial signature
  Call -> Plan
  dial Module: m = dial.wrap(mod)
  dial Operator
  Operator --call-> Operator --call-> Task (like airflow)
  dial.run or Task.run (like dask)

  composition:
    task1 and task2
      op1.task() and op2.task() -> Task
    task1 or task2

  multi(1, 2) -> Task
  multi.call([], {}, **options) -> Task

  add(1, 2).run() <-> +add(1, 2)
  add.call((1, 2), {}, **options).run()
    <->
  +add.call((1, 2), {}, **options)
  dial.Operator <=> celery.Task
  dial.Call <=> celery.Signature

  inspect return type
  frame type

  lazy create of Task

  dial is runtime lib
  tea create dial config from db conf

  cf. doit uses inspect for signature: doit.action.BaseAction

dial provider
  Connection => Hook
  Sensor, Operator

Hook (db hook)
  refer to connection config
  a private interface like an SPI
  can return an underlying connection (opened)
  standard objects are built on top of it: like, sensor, task, result

generic task queue
  1. mark func as task: inspect sig, group / chord
  1.1 mc node manager
  2. compose tasks into dag
  3. executor:
      dispatcher
      consumer
  4. cluster management
      cluster
      master: node
      worker: node, process
  run profile: user, venv

  airflow: DAG default params
  airflow: @task.{docker,sensor,kube} are operators, task() -> dag node
  airflow: BaseTrigger (time), db
  airflow: add_one.expand([1, 2, 3]) -> [add_one(1), add_one(2), add_one(3)]
  airflow: TaskFlow API can use venv

  celery: AsyncResult
  celery: app.send_task, app.subclass_with_self('class')
  celery: Task can be curried

task queue
  celery worker
  dask distributed: modeled after concurrent.futures
  gevent works with concurrent.futures
  zerorpc as task queue: zmq <-> rabbitmq

expression dis/decomp
  pony
  geniusql

  let(expr, lambda x: 1)
  select(p for p in Product if p.col == 'name') => filter map reduce
  (p for q in P for p in q)

supervisor.conf
  command
  Config.from_object
  Config.from_database

xmap
  taskmap
  hookmap
  datamap
    source: tea:789

  xmap.get() ->
  xmap.call('a.select',
  xmap.get('xyz')
  xmap.xyz.select()

mc / chp extension model
  runner
    agent: start / stop, metrics, beat
    scope: route, token / user, request
      hash key
    dynamic port
    route stats
    http: query, flask, bokeh, notebook, voila
    custom: hive, redis, postgres, spark, zk, bk

dragonfly deploy
  needs: libunwind-dev, libpfm4-dev
  repo (ok)
    gmod update --init
    cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..
    ninja test (proactor_test failed)
  tagged (failed)
    0.17.0 + helio-0.2.0
    link helio into dragonfly
    comment out proactor_stress test in helio
  how to build redis extensions

can we unify duckdb with dragonfly?
  duckfly

use cuddle as wire format?

mosaic|segment|fragment|piece|chunk

project -> module
src -> deployment

kernel = process
instructions
context

generic bokeh kernel
  multiple dashboard

timelines
  1 mo:
    chp ->
      alloy server / root server
      avatar: 
        data/consum.table
        data/proj.frame-id
        dash/proj.dash-name
      calcite:
        proj.data-name
        consum.attrib
        space.query

    scope resolver
      consum -> dw, consum
      proj -> proj
      my-space -> space

    tableau caching
    cache definition
    query endpoint
      dataset.frame
      consum.table

one pager
  0. looking at data
  1. tableau: my-db: user -> proid
  2. notebook

python spark
  http://pages.cpsc.ucalgary.ca/~aycock/spark/
  unpyc
    https://github.com/andrew-tavera/unpyc37/
    https://github.com/rocky/python-decompile3
    https://github.com/extremecoders-re/PjOrion-Deobfuscator
    https://github.com/rocky/x-python

how to represent interceptor / dispatcher
  @offline '3d'
  @runas 'user'
  the_func arg1, arg2
  set a

  @runas 'system'
  tran_1 _, a1, 'c'
  tran_2 _, a2, 'd'

interpretation
  workflow
  dashboard
  template
    excel, ppt
    workflow template + binding -> workflow (state)
      jobs = ['a', 'b']
      ?emailed = email_user()
      form = user_fill(emailed)
  ctx.resolve('a')

entire call tree!
  user_func1 = run_as('user', func1)
  t_func2 = task(func2)
  a = user_func1(b, c)
  d, e = t_func2(a, 5)
  Result(a, b, c)
  proj.v

  stack([run_as('user'), run_as('task'), func(a, b)])
  run_as('user', func)
  sql_exec(sql='select ...', db=[])
  sql_exec(from_='', filter='', select='', join='')
    sql -> tree
      if spark
        gen query func
      elif from same conn && conn.kind not in ['api']
        send sql
      else
        send to calcite

intake -> dask

json schema infer
  https://stackoverflow.com/questions/7341537/tool-to-generate-json-schema-from-json-data
  genson

services
  redis / dragonfly

  spark
    spark.master
    spark.worker

  hive
    https://cwiki.apache.org/confluence/display/hive/design
    hive.metastore -> metastore
    hive.server

  metastore
    https://cwiki.apache.org/confluence/display/Hive/AdminManual+Metastore+Administration
    use remote derby as "metastore database"
    run hiveserver2 as remote "metastore server"

  cassandra
  zookeeper
  bookkeeper

  pulsar
  kafka
  apacheDS

writing parquet
msgspec
annotation can be function
coffee -> lua

lupa / lunastic -> serve redis data as tables
embed lupa inside redis
webdis: http for redis

isolate for arbitrary code execution
  https://github.com/ioi/isolate
  used by vlang playground

vlang
  TODO:
    type check: need better type inference during for lambda
  https://stackoverflow.com/questions/34464146/the-idiomatic-way-to-implement-generators-yield-in-golang-for-recursive-functi
  chan <- ->
    tokenizer coroutine
    parser coroutine
    example from golang
  llvm ir
  wasm ir

  without global var?
  v doc stack & heap about when stack alloc

  v from command
    how does c2v work
      use clang binary to generate AST
    how does py2v work
      python file -> ast json -> v file
    how does go2v work
      ast_getter.go

  v db
    raft
    etcd
    cockroach
    duckdb

  v orm
    https://github.com/d-tsuji/awesome-go-orms

  v ast
  v fmt
  arrow, parquet
  msgpack
  v has msgspec like mapping to json already. validation?
  v redis
  vsql, vdd, vlmdb
  orm: how does it work?
  compiler flags, attribute
  vweb: how does comptime attr works?
  ctags:
    https://github.com/jstemmer/gotags.git
  replace: https://github.com/piranha/goreplace.git
  grep: https://github.com/svent/sift.git
  awk:
    https://benhoyt.com/writings/awkgo/
    https://github.com/benhoyt/goawk.git
    https://github.com/spakin/awk.git
  sed:
    https://github.com/zkry/go-sed.git
    https://github.com/carterpeel/gosed.git
    https://github.com/rwtodd/Go.Sed.git
  parallel & xargs
    https://github.com/mylanconnolly/parallel.git
    https://github.com/brentp/gargs.git
    https://github.com/woorui/xargo.git
    https://github.com/shenwei356/rush.git
  https://github.com/go-python/gopy
  https://github.com/go-python/cpy3
  https://github.com/go-python/gpython

  lark + spark -> vlang
    asdl -> 
    https://github.com/BlankSpruce/gersemi
      cmake parser that use lark
  lark goodies
    builtin tokens
    auto tree (if don't specify node types)
      Token(TOK_TYPE, "tok-value")
      Tree(NODE_TYPE, [Token(..), Token(..), ..])
    interesting embedding
      https://github.com/alecthomas/participle/blob/master/_examples/sql/main.go

  https://github.com/rocky/python-spark.git
  https://github.com/tobymao/sqlglot.git

  nearly js
    parsing chart
    vsql has an vlang generator from earley grammar
  https://github.com/elliotchance/vsql.git

  vlang notes
    https://github.com/lydiandy/vlang_note

  c2go
    clang preprocess -> one big file pp.c
    we should
      read makefile
      generate probe files for check eg ifdef XYZ_MACRO -> HAS__XYZ_MACRO

  dingo: type safe injection
  https://github.com/alicebob/miniredis
  https://github.com/elliotchance/postgresql-partitioning
  https://github.com/elliotchance/sql2mq
  https://github.com/patrickpissurno/vredis
  
  vim -> vlang
    read neovim for core
  scintilla -> vlang

  vim vlang plugin?

  https://github.com/Larpon/vee.git
  https://github.com/Itay2805/Vork.git
  https://github.com/lemoncmd/vcc.git
  https://github.com/rui314/chibicc.git

  lift c -> v
    discover stuff store info
    analyze: lib, exe, test
    report problems
    user query / inspect
    define refactor rules
    transform

  examples/term.ui
    render changes only
    split-state ui framework

  https://github.com/baztian/jaydebeapi.git
  jpype1

  https://github.com/Larpon/jni.git

plugin
  https://pypi.org/project/Yapsy/
  https://github.com/daltonmatos/plugnplay
  https://trac.edgewall.org/browser/trunk/trac/core.py
  https://trac-hacks.org/browser/announcerplugin/trunk/announcer
  https://trac.edgewall.org/wiki/TracDev

  https://github.com/cantora/aug.git

pycc
  https://github.com/cantora/pyc.git
  https://github.com/c3lang/c3c.git

end-user experience
  is vscode/git in stash personal repo
  mydb:
    schema <-> ldap
    user-id <-> personal

    connect as myself
    share with others

ui
  react hooks
    usehooks.com
    usehooks-ts.com
  ladle/storybook
  ladle: already using vite
  playwright: visual testing?
  turborepo
  pnpm
  vite
  ?solidjs

package.json
  exports
  bin
  types

weboot.js
  springboot-like
  base choice:
    language: coffee, js, ts 
    package man: npm, pnpm, yarn
    multi-repo: turbo, lerna
    bundler: vite/esbuild, webpack, turbopack, parcel
    builder: esbuild, rollup
    component: react, solid, vue
    framework: antd, material
    formatter: prettier
    lint: eslint
    css: unocss, tailwind
    auto-test: hypothesis
      api token management
    ladle for config

extension-point

@vanilla-extract/css

anvil: place to create stuff
  solid-playground
    solid-repl
    diagram repl
    client render with hydration
  fabricjs
  tldraw / excalidraw
    port to solid-js
  springyjs
  https://github.com/hijiangtao/Force-Directed-Layout
  https://github.com/vasturiano/3d-force-graph
  three.js two.js
  cola.js
  svg.js
  cytoscape.js
  fabric.js
  sigma.js
  dnd + dock
  bokeh
  panel

pradyun/Py2C
  python -> c++
  print('hello')
    => py::print(py::str("hello"))
    => std::cout << "hello" << endl;

cache
  marshmallow
  redisworks
  redisjson
  subredis
  https://github.com/BrunoCostaPrado/prisma-postgres-solidjs-redis
  https://github.com/crazylazylife/superteam-task-manager

transpile
  shedskin: py -> c++
  transcrypt: py -> javascript
    @javascript
  https://github.com/pyjs/pyjs
  pyxl3
    lark to parse
      <ns:elem-tag {a} this "that" key=something key1="that{a}" key2={that} >
        {if something: <a
        {something ? for this or that {
            hello.world()
            x.map(a, <a> something </a>)
            sig()
            if a < b:
          }
        }
      </>
      balanced('{', '}')
      balanced("'''")
      balanced('"')
      balanced("'")

foo_js.py

edgedb: graph relational db
cube.js at cube.dev

chp
  jwt
  spnego, forward back
  permission

job progress manager using 'rich'
pip use rich for it's progress

vscode quick-edit
  move text down
  multi edit

code.db
  use doit!
  python code browser first
  test watcher
  c/c++, rust, go, python
  additive meta ETL: source, build, binary
  [boot] -> fileset -> [infer] -> more fileset
  do you want to make a package? bi-partite graph
  rules
    folders with
      __init__.py setup.py
      package.json
      include, src, lib
      src/java, gradle
  info
    callables

alloy is a set of run command

buildout config
  alloy.conf
  software defaults + recipe template (alloy recipe)
  recipe is data + callable action
  ${scope:varname}
  depends on: thing and recipe

gnu parallel replacement
  zmap -from <what> -to barrier command ...

storage engine
  sqlite lsm + vedis + postgres engine + duckdb
  fdw for arrow

  stmt -> query

  select(table('foo'), column('a').as('')) -> stmt
  delete()
  update()
  op = insert(table('x'), column('foo'))
  op(['a', 'b'])

https://linuxhandbook.com/check-if-systemd/

tableau use axis & field for display
tableau prep:
  join: inner, outer

pip update command
  how to add new command to pip
  update outdated
  with strict version (conda mode)

pyparam: arg parsing returning dict instead of objects
pipen: a bit like reactivex, channels are pandas.DataFrame
argx
cmdy
datar

asyncio
  aiojobs
  aiomonitor
  aiofiles
  aioredis
  aiozmq
  aiopg
  aiomysql

https://stackoverflow.com/questions/57730010/python-asyncio-subprocess-write-stdin-and-read-stdout-stderr-continuously

https://stackoverflow.com/questions/46782908/using-multiprocessing-to-handle-socket
https://stackoverflow.com/questions/72319941/what-do-socket-sol-socket-and-socket-so-reuseaddr-in-python
https://stackoverflow.com/questions/9436757/how-to-use-a-multiprocessing-manager

job runner
  hook based
  on- / off-line
  client: must have conn, multiple conn, no job store
  HA client
  import dial.plugin as p
  p.func.s(a, b)
