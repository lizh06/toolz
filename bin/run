#!/usr/bin/env python3
from pathlib import Path
import os
import sys

dist = Path(__file__).parent.parent
sys.path.insert(0, str(dist / 'lib'))

from utilz import activate_first, sys_path_prepend, let, uniqa
activate_first(dist, ['venv-local', 'venv'])

def _command(name, conf, group=None):
    prog = ('' if group is None else f'{group} ') + name
    if isinstance(conf, (list, tuple)):
        conf = dict(arguments=conf)
    desc = conf.get('description') or f'{prog} command'
    parser = ArgumentParser(prog=prog, description=desc)
    args = conf.get('arguments')
    if args:
        for a in args:
            tags = a.pop('arg')
            if isinstance(tags, str):
                tags = tags.split()
            parser.add_argument(*tags, **a)
    # parser.print_help()
    return parser, conf.get('code')

def argparser(conf, cname, group):
    for x, cinfo in conf.get('commands',{}).items():
        if cname == x:
            return _command(cname, cinfo, group)

def find_sym(mod, names):
    for n in names:
        s = getattr(mod, n, None)
        if s: return s

_FIXTURES = 'ctx'.split()

def reflect(f):
    s = signature(f)
    uses = []
    params, letters = [], set()
    for p in s.parameters.values():
        if p.name in _FIXTURES:
            uses.append(p.name)
            continue
        annot = p.annotation
        if annot is not Parameter.empty and isinstance(annot, type):
            t = annot
        else: t = str
        n = p.name.replace('_', '-')
        # params[n] = a = dict(t=t, alt=p.default)
        a = {}; params.append(a)
        c = n[0]
        if c == '-':
            a['arg'] = n = n[1:]
            if n.endswith('s'):
                a['nargs'] = '*'
        elif len(n) == 1:
            a['arg'] = f'-{n}'
        elif c in letters:
            a['arg'] = f'--{n}'
        else:
            a['arg'] = f'-{c} --{n}'
            letters.add(c)
        if t is bool:
            a['action'] = 'store_true'
        if p.default is not Parameter.empty:
            a['default'] = p.default
    return params

from argparse import ArgumentParser
from configparser import ConfigParser
from inspect import signature, Parameter
from importlib import import_module
import yaml

argv = sys.argv[1:]
gname = argv[0]
cname = argv[1]

bases = let(os.environ.get('RUN_PATH'), lambda rpath:
        let(rpath.split(os.pathsep) if rpath else [], lambda a:
            a + ['$HOME', dist]))
bases = list(uniqa(Path(os.path.expandvars(os.path.expanduser(x))) for x in bases))
cwd = let(Path(''), lambda x: x if x in bases else let(bases.insert(0,x), lambda _: x))

mod, seen = None, set()
for base in bases:
    if not base.exists(): continue
    with sys_path_prepend(base):
        try:
            mod = import_module(f'run.{gname}')
            os.chdir(base)
            break
        except: pass

    # run/conf or run.conf
    # conf = base / 'run.conf'
    # if conf.exists():
    #     config = ConfigParser()
    #     config.read(conf)
    #     print('conf:', config.sections())

if mod is None:
    print('no command group', gname)
    sys.exit(-1)

meta = Path(mod.__file__).with_suffix('.yml')
if 0 and meta.exists():
    y = yaml.safe_load(open(meta).read())
    par, code = argparser(y, cname, gname)
    if code is None:
        code = [f'run_{cname}', cname]
    else: code = [code]
    cmd = find_sym(mod, code)
    if cmd is None:
        raise Exception(f'cannot find command {cname}')
else:
    cmd = find_sym(mod, [f'run_{cname}', cname])
    par, _ = _command(cname, dict(arguments=reflect(cmd)), gname)

params = vars(par.parse_args(argv[2:]))
cmd(**params)

# TODO
#   - meta processing
#       flask -> json-schema
#       cli -> ArgumentParser
#   - group.yaml has commands, services profiles
#   - runner scopes: app, user, session, request
#   - func(kids, *, attr1, attr2)
#   - embedded blade parameter
#   - support unnamed arg
#   - cannot callback to underscore args
#   - extra pass for single letter args
#   - support str|int|bool|List inference on signature
#       bool -> action=store_true
#       [] -> action=append
#   - task.yml override task.py
#   - 'well-known' args for group
#   - 'run {group}' show all commands in {group}
#   - 'run' show all commands in all groups
#   - 'run make {}' fallback to default action
#   - multiple commands 'run -d a=1 task add :a'
#   - builtin commands
#   - command resolver
#   - context builder
#   - run V=http:// db= query select * from something
#   - load first, assign to key, invoke command
#   - def run_something(ctx, name, some)
#   - reducer?
#   - run state ctx {func}; then wait for command
#   - convo channel + state, replies
#
#   x reflect on functions
#
# use cases:
#   server monitor
#   httpx
